<template>
	<view class="standard">

		<u-sticky :offset-top="offset">
			<view class="standard-top">
				<view class="action" @click="newStandard()">
					新增标准
				</view>
				<view class="action" @click="upload()">
					模板下载
				</view>
				<view class="action" @click="batch()">
					{{batchtitle}}
				</view>
			</view>
			<view class="subsearch">
				<u-search placeholder="请输入标准名称" v-model="standardName" shape="square" :action-style="actionStyle" border-color='#4abdb4'
				 bg-color="#ffffff" @search="searchStandard()" @custom="searchStandard()" @clear="clear()"></u-search>
			</view>
		</u-sticky>

		<view class="standard-content">
			<view class="empty" v-if="list.length <= 0">
				<image src="../../static/nodata.png" mode=""></image>
				<view class="empty-tips">
					暂无数据
				</view>
			</view>
			<scroll-view scroll-y style="height:60vh;width: 100%;" @scrolltolower="onreachBottom">
				<view class="part" v-for="(item,index) in list">
					<view class="top-part">
						<view class="left">
							<view class="check" v-if="showCheck">
								<checkbox :value="item.value" :checked="item.checked" @click="check(index)" />
							</view>
							<image src="../../static/excel.png" mode=""></image>
						</view>
						<view class="right">
							<view class="name">
								{{item.name}}
							</view>
							<view class="detail">
								<view class="size">
									{{item.size}}KB
								</view>
								<view class="time">
									{{$u.timeFormat(item.time, 'yyyy-mm-dd hh:MM:ss')}}
								</view>
							</view>

						</view>
					</view>

					<view class="action-part">

						<view class="allot gray" v-if="item.used=='1'">
							下发
						</view>
						<view class="allot" v-else @click="allot('single')">
							下发
						</view>
						<view class="see gray" v-if="item.used=='1'">
							重命名
						</view>

						<view class="see" v-else @click="reviewname(index)">
							重命名
						</view>
						<view class="use green" v-if="item.used=='1'" @click="startUse(index)">
							启用
						</view>
						<view class="use" v-else @click="stopUse(index,item.name)">
							停用
						</view>
						<view class="del" @click="del(index,item.name)">
							删除
						</view>
					</view>
				</view>
				<u-loadmore @loadmore="loadmore" bg-color="none" :status="status" :icon-type="iconType" margin="30" :load-text="loadText"
				 v-if="list.length >=1" />
				
			</scroll-view>
			
		</view>
		<view class="bottom" v-if="showCheck&&list.length >=1">
			<view class="check-bottom">
				<view class="left">
					<checkbox value="all" :checked="all" @click="checkAll()" />
					<view>全选</view>
				</view>
				<view class="right">
					<view class="batch" @click="allot('batch')">
						批量下发
					</view>
					<!-- <view class="batch stop" @click="batchStop()">
						停用
					</view> -->
					<view class="batch del" @click="batchDel()">
						批量删除
					</view>
				</view>
			</view>
		</view>
		<!-- 下发或批量下发 -->
		<u-popup v-model="showAllot" mode="bottom" height="80%" @close="close()">
			<view class="roleModel">
				<view class="roleTop">
					{{allotitle}}
				</view>
				<view class="content">
					<view class="choose">
						<view class="title">
							查看数据人员
						</view>
						<view class="input_part">
							<u-input v-model="person" type="select" :border="true" @click="openPerson()" height="70" />
						</view>
						<view class="add" @click="addPerson()">
							添加
						</view>
					</view>
					<view class="hasChoosed" v-if="personList.length>0">
						<view class="has" v-for="(item,index) in personList">
							<view class="name">
								{{item.name}}
							</view>
							<view class="icon" @click="delPerson(index)">
								<u-icon name="close" color="#cccccc" size="28"></u-icon>
							</view>
						</view>
					</view>
					<view class="range">
						<view class="title">
							下发范围
						</view>

						<view class="part">
							<view class="left">
								<view class="top">
									<view class="">
										待选列表
									</view>
									<u-checkbox-group @change="checkedAllList">
										<u-checkbox v-model="listchoose" active-color="#4abdb4">全选</u-checkbox>
									</u-checkbox-group>

								</view>
								<view class="list">
									<scroll-view scroll-y style="height:300rpx;width: 100%;">
										<u-checkbox-group @change="checkboxGroupChange" :wrap="true">
											<u-checkbox @change="checkboxChange" v-model="item.checked" v-for="(item, index) in checkList" :key="index"
											 :name="item.name" active-color="#4abdb4">
												<text class="job">{{item.job}}</text><text>{{item.name}}</text>
											</u-checkbox>
										</u-checkbox-group>
									</scroll-view>
								</view>
							</view>
							<view class="right">
								<view class="top">
									已选列表
								</view>
								<view class="list">
									<scroll-view scroll-y style="height:300rpx;width: 100%;">
										<view class="has" v-for="(item,index) in hasList" v-if="hasList.length>0">
											<view class="name">
												{{item.name}}
											</view>
											<view class="icon" @click="delChecklist(index)">
												<u-icon name="close" color="#cccccc" size="28"></u-icon>
											</view>
										</view>
									</scroll-view>
								</view>
							</view>
						</view>
					</view>
					<view class="choose">
						<view class="title">
							关联标准
						</view>
						<view class="input_part">
							<u-input v-model="relevance" type="select" :border="true" @click="openRelevance()" height="70" />
						</view>
						<view class="add" @click="addrelevance()">
							添加
						</view>
					</view>
					<view class="hasChoosed" v-if=" addrelevanceList.length>0">
						<view class="has" v-for="(item,index) in addrelevanceList">
							<view class="name">
								{{item.name}}
							</view>
							<view class="icon" @click="deladdrelevance(index)">
								<u-icon name="close" color="#cccccc" size="28"></u-icon>
							</view>
						</view>
					</view>
				</view>

				<view class="roleAction">
					<view class="cancel" @click="cancel()">
						取消
					</view>
					<view class="sure" @click="sure()">
						确定
					</view>
				</view>
			</view>
			<!-- 选择人员 -->
			<u-action-sheet :list="personSheetList" v-model="showPersonList" @click="personSheetCallback" border-radius="20"></u-action-sheet>
			<!-- 关联标准 -->
			<u-action-sheet :list="relevanceSheetList" v-model="showRelevanceList" @click="relevanceSheetCallback" border-radius="20"></u-action-sheet>

		</u-popup>


		<!-- 重命名 -->
		<u-modal v-model="renameshow" @confirm="renameconfirm" ref="uModal" :async-close="true" :show-cancel-button="true"
		 :confirm-style="{'color':'#fa3534'}" :show-title="false">
			<view class="slot-content">
				<view class="model">
					<view class="rename">
						<u-input v-model="renamevalue" type="text" :border="true" placeholder="请输入名称" />
					</view>
					<view class="tips">
						名称长度范围为2-30个字符，请勿输入特殊符号
					</view>
				</view>
			</view>
		</u-modal>
		<!-- 停用 -->
		<u-modal v-model="stopshow" @confirm="stopconfirm" :async-close="true" :show-cancel-button="true" :confirm-style="{'color':'#fa3534'}"
		 :show-title="false">
			<view class="slot-content">
				<view class="model">
					<view class="stop">
						您确定要停用【{{Title}}】吗?
					</view>
					<view class="tips">
						停用后标准将被冻结，无法继续
					</view>
				</view>
			</view>
		</u-modal>
		<!-- 删除 -->
		<u-modal v-model="delshow" @confirm="delconfirm" :async-close="true" :show-cancel-button="true" :confirm-style="{'color':'#fa3534'}"
		 :show-title="false">
			<view class="slot-content">
				<view class="model">
					<view class="stop">
						您确定要删除【{{Title}}】吗?
					</view>
					<view class="tips">
						已下发的标准将同时删除
					</view>
				</view>
			</view>
		</u-modal>
		<!-- 批量删除 -->
		<u-modal v-model="delAllshow" @confirm="delAllconfirm" :async-close="true" :show-cancel-button="true" :confirm-style="{'color':'#fa3534'}"
		 :show-title="false">
			<view class="slot-content">
				<view class="model">
					<view class="stop">
						您确定要删除已选中的标准吗?
					</view>
					<view class="tips">
						已下发的标准将同时删除
					</view>
				</view>
			</view>
		</u-modal>

		<u-toast ref="uToast" />
	</view>
</template>

<script>
	export default {
		props: {
			offset: {
				type: Number,
				default: 0
			},
		},
		data() {
			return {
				standardName: '',
				showCheck: false,
				batchtitle: '批量管理',
				checkLength: '0',
				checkList: [{
						checked: false,
						job: '组长',
						name: '张三'
					},
					{
						checked: false,
						job: '组长',
						name: '张三'
					},
					{
						checked: false,
						job: '组长',
						name: '张三'
					},
					{
						checked: false,
						job: '组长',
						name: '张三'
					}
				],
				actionStyle: {
					backgroundColor: '#4abdb4',
					color: '#fff',
					margin: '0',
					width: '100rpx',
					height: '68rpx',
					lineHeight: '68rpx',
					borderRadius: '0 10rpx 10rpx 0'
				},
				list: [{
						value: '1',
						checked: false,
						name: 'xxx标准.xlsx',
						size: '152',
						time: '1581170184'
					},
					{
						value: '2',
						checked: false,
						name: 'xxx标准.xlsx',
						size: '152',
						time: '1581170184'
					},
					{
						value: '3',
						checked: false,
						name: 'xxx标准.xlsx',
						size: '152',
						time: '1581170184'
					}
				],
				all: false, //是否全选
				renameshow: false,
				renameindex: '',
				renamevalue: '',
				stopshow: false,
				stopIndex: '',
				delshow: false,
				delIndex: '',
				delAllshow: false,
				Title: '',
				showAllot: false,
				allotitle: '下发',
				personList: [],
				person: '',
				hasList: [],
				listchoose: false,
				relevance: '',
				addrelevanceList: [],


				personSheetList: [{
						text: '专责1'
					},
					{
						text: '专责2'
					},
					{
						text: '专责3'
					},
				],
				showPersonList: false,

				relevanceSheetList: [{
						text: 'xxx标准'
					},
					{
						text: 'xxx标准1'
					},
					{
						text: 'xxx标准2'
					}
				],
				showRelevanceList: false,


				// 分页
				status: 'loadmore', // 下拉加载状态
				iconType: 'flower',
				loadText: {
					loadmore: '点击或上拉加载更多',
					loading: '正在加载...',
					nomore: '我也是有底线的'
				},
				pages: 1, //实际页数
				pageNum: 1, //当前下拉加载页数
				pageSize: 10, //每页的条数
			}
		},
		methods: {
			//搜索时触发
			searchStandard() {
				console.log(this.standardName, 'standardName')
			},
			//搜索时点击清除按钮触发
			clear() {
				console.log(this.standardName, 'standardName')
			},
			getlist() {
				this.status = 'loading';
				const recordsList = this.list; //模拟请求到的数据
				if (this.pageNum > 1) {
					this.list = this.list.concat(recordsList);
				} else {
					this.list = recordsList;
					this.status = 'nomore';
				}
				uni.stopPullDownRefresh();
				this.pages = 3; //模拟页数最大等于3
				this.pageNum++;
				if (this.pageNum > this.pages) {
					this.status = 'nomore';
				}

			},
			// 上拉加载
			onreachBottom(e) {
				if (this.pageNum > this.pages) {
					this.status = 'nomore';
					return;
				}
				this.getlist();
			},
			loadmore() {
				if (this.pageNum > this.pages) {
					this.status = 'nomore';
					return;
				}
				this.getlist();
			},
			//批量管理
			batch() {
				this.showCheck = !this.showCheck
				if (this.showCheck) {
					this.batchtitle = '管理完成'
				} else {
					this.batchtitle = '批量管理'
				}
			},
			//选中单个
			check(index) {
				let checkLength = '0';
				this.list[index].checked = !this.list[index].checked;
				this.list.map(item => {
					if (item.checked) {
						checkLength++;
					}
				})
				if (checkLength == this.list.length) {
					this.all = true;
				} else {
					this.all = false;
				}
				this.checkLength = checkLength;
			},
			//全选
			checkAll() {
				if (this.all == true) {
					this.list.map(val => {
						val.checked = false;
					})
				} else {
					this.list.map(val => {
						val.checked = true;
					})
				}
			},

			//批量删除
			batchDel() {
				if (this.checkLength == '0') {
					this.$refs.uToast.show({
						title: '请至少选择一项标准进行删除',
						type: 'warning'
					})
					return;
				}
				this.delAllshow = true
			},
			delAllconfirm() {
				this.list.map((item, index) => {
					if (item.checked) {
						this.list.splice(index, this.checkLength)
					}
				})
				this.delAllshow = false
			},
			//下发或批量下发
			allot(type) {
				if (type == 'single') {
					this.showAllot = true;
					this.allotitle = '下发';

				}
				if (type == 'batch') {
					if (this.checkLength == '0') {
						this.$refs.uToast.show({
							title: '请至少选择一项标准进行下发',
							type: 'warning'
						})
						return;
					}
					this.showAllot = true;
					this.allotitle = '批量下发';
				}
			},
			// 重命名
			reviewname(index) {
				this.renameshow = true;
				console.log(index, 'index')
				this.renameindex = index;
			},
			//确定重命名
			renameconfirm() {

				if (!/[u4e00-u9fa5_a-zA-Z0-9_]{2,30}/.test(this.renamevalue)) {
					this.$refs.uToast.show({
						title: '名称长度范围为2-30个字符',
						type: 'warning'
					})
					this.$refs.uModal.clearLoading();
					return false;
				} else {
					console.log(this.renameindex, 'this.renameindex')
					this.list[this.renameindex].name = this.renamevalue;
					this.renameshow = false;
				}

			},
			// 启用
			startUse(Index) {
				this.list[this.stopIndex].used = '1';
			},
			// 停用
			stopUse(index, name) {

				this.stopshow = true;
				this.stopIndex = index;
				this.Title = name;
			},
			stopconfirm() {
				this.list[this.stopIndex].used = '1';
				this.stopshow = false;
			},
			//删除
			del(index, name) {
				this.delshow = true;
				this.delIndex = index;
				this.Title = name;
			},
			delconfirm() {
				this.list.splice(this.delIndex, '1')
				this.delshow = false;
			},
			//下发弹框
			// 人员
			openPerson() {
				this.showPersonList = true;
			},
			personSheetCallback(index) {
				this.person = this.personSheetList[index].text;
			},
			addPerson() {
				if (this.personList.length == 0) {
					this.personList.push({
						name: this.person
					})
				} else {
					this.personList.map(e => {
						if (e.name != this.person) {
							this.personList.push({
								name: this.person
							})
						} else {
							this.$refs.uToast.show({
								title: '无需重复添加',
								type: 'warning'
							})
							return false;
						}
					})
				}


			},
			delPerson(index) {
				this.personList.splice(index, 1)
			},
			checkboxChange(e) {

			},
			// 选中任一checkbox时，由checkbox-group触发
			checkboxGroupChange(e) {
				this.hasList = [];


				e.map(item => {
					this.hasList.push({
						name: item
					});
				})
				if (e.length == this.checkList.length) {
					this.listchoose = true;
				} else {
					this.listchoose = false;
				}
			},
			// 全选
			checkedAllList() {
				this.hasList = [];
				if (this.listchoose == true) {
					this.checkList.map(val => {
						val.checked = true;
						this.hasList.push({
							name: val.name
						})

					})
				} else {
					this.list.map((val, index) => {
						val.checked = false;
						this.hasList.splice(index, 1)
					})
				}

			},
			delChecklist(index) {
				this.hasList.splice(index, 1)
			},
			//标准关联
			openRelevance() {
				this.showRelevanceList = true;
			},
			relevanceSheetCallback(index) {
				this.relevance = this.relevanceSheetList[index].text;
			},
			addrelevance() {
				if (this.addrelevanceList.length == 0) {
					this.addrelevanceList.push({
						name: this.relevance
					})
				} else {
					this.addrelevanceList.map(e => {
						if (e.name != this.relevance) {
							this.addrelevanceList.push({
								name: this.relevance
							})
						} else {
							this.$refs.uToast.show({
								title: '无需重复添加',
								type: 'warning'
							})
							return false;
						}
					})
				}
			},
			deladdrelevance() {
				this.addrelevanceList.splice(index, 1)
			},
			sure() {
				this.showAllot = false;
			},
			cancel() {
				this.showAllot = false;
			},
			close() {
				this.showAllot = false;
			},
			newStandard() {

			},

			upload() {

			}






		}
	}
</script>

<style lang="less" scoped>
	/deep/.u-content {
		border-radius: 10rpx 0 0 10rpx !important;
	}

	.standard {
		background: #F8F8F8;

		.standard-top {
			display: flex;
			justify-content: space-around;
			padding: 20rpx 30rpx;
			background: #FFFFFF;

			.action {
				width: 30%;
				background: #4abdb4;
				border-radius: 10rpx;
				color: #FFFFFF;
				font-size: 30rpx;
				text-align: center;
				height: 60rpx;
				line-height: 60rpx;
			}
		}

		.subsearch {
			padding: 20rpx 30rpx;
			background: #FFFFFF;
		}

		.standard-content {
			padding: 30rpx;
			padding-bottom: 100rpx;

			.part {
				padding: 20rpx;
				margin-bottom: 20rpx;
				border-radius: 20rpx;
				border: 2rpx solid #f6f6f6;
				background: #FFFFFF;

				.top-part {
					display: flex;
					justify-content: flex-start;
					align-items: center;
					margin: 10rpx 0;

					.left {
						display: flex;
						margin-right: 20rpx;

						.check {
							width: 30px;
							height: 100rpx;
							line-height: 100rpx;
						}

						image {
							width: 100rpx;
							height: 100rpx;
						}
					}

					.right {
						width: 100%;
						flex: 1;

						.name {
							width: 100%;
							flex: 1;
							font-size: 30rpx;
							color: #333333;
							overflow: hidden;
							display: -webkit-box;
							text-overflow: ellipsis;
							-webkit-line-clamp: 2;
							-webkit-box-orient: vertical;
							line-height: 50rpx;
						}

						.detail {
							width: 100%;
							display: flex;
							justify-content: space-between;
							line-height: 50rpx;

							.size {
								font-size: 28rpx;
								color: #606266;
							}

							.time {
								font-size: 24rpx;
								color: #999999;
							}
						}
					}
				}

				.action-part {
					display: flex;
					justify-content: flex-end;
					font-size: 28rpx;
					border-top: 2rpx solid #f6f6f6;
					padding-top: 30rpx;

					.see {
						width: 100rpx;
						text-align: center;
						border: 2rpx solid #2b85e4;
						color: #2b85e4;
						margin-right: 20rpx;
						padding: 6rpx 0;
						border-radius: 10rpx;
					}

					.allot {
						width: 100rpx;
						text-align: center;
						border: 2rpx solid #18b566;
						color: #18b566;
						margin-right: 20rpx;
						padding: 6rpx 0;
						border-radius: 10rpx;
					}

					.del {
						width: 100rpx;
						text-align: center;
						border: 2rpx solid #dd6161;
						color: #dd6161;
						margin-right: 20rpx;
						padding: 6rpx 0;
						border-radius: 10rpx;
					}

					.use {
						width: 100rpx;
						text-align: center;
						border: 2rpx solid #ff9900;
						color: #ff9900;
						margin-right: 20rpx;
						padding: 6rpx 0;
						border-radius: 10rpx;
					}

					.gray {
						border: 2rpx solid #999999;
						color: #999999;
					}

					.green {
						border: 2rpx solid #18b566;
						color: #18b566;
					}
				}

			}
		}

		.bottom {

			position: fixed;
			width: 100%;
			background: #FFFFFF;
			height: 100rpx;
			line-height: 100rpx;
			box-shadow: 0 -6rpx 10rpx rgba(0, 0, 0, 0.15);
			bottom: 0;
			z-index: 99;

			.check-bottom {
				display: flex;
				justify-content: space-between;
				align-items: center;
				padding: 0 30rpx;

				.left {
					display: flex;
					color: #2979ff;
					font-size: 32rpx;

				}

				.right {
					display: flex;
					justify-content: flex-end;

					.batch {

						background: #19be6b;
						color: #FFFFFF;
						border-radius: 40rpx;
						height: 60rpx;
						line-height: 60rpx;
						text-align: center;
						margin-right: 20rpx;
						padding: 0 20rpx;
						box-shadow: 0 6rpx 6rpx #71d5a1;

					}

					.stop {
						background: #ff9900;
						margin: 20rpx 0;
					}

					.del {
						background: #fa3534;
						box-shadow: 0 6rpx 6rpx #fab6b6;
					}
				}
			}

		}

		.model {
			padding: 30rpx;

			.rename {
				margin: 20rpx 0;
			}

			.stop {
				font-size: #333333;
				line-height: 50rpx;
				font-size: 32rpx;
				margin: 20rpx 0;
			}

			.tips {
				font-size: 28rpx;
				color: #999999;
			}
		}

		//下发
		.roleModel {
			width: 100%;
			position: relative;
			padding-top: 90rpx;
			padding-bottom: 120rpx;


			.roleTop {
				height: 90rpx;
				line-height: 90rpx;
				background: #4abdb4;
				color: #FFFFFF;
				font-size: 34rpx;
				text-align: center;
				position: fixed;
				top: 0rpx;
				width: 100%;
				z-index: 99;
			}

			.content {

				padding: 30rpx;
			}

			.choose {
				display: flex;
				justify-content: flex-start;
				align-items: center;
				margin: 40rpx 0 20rpx;

				.title {
					color: #333333;
					font-size: 30rpx;
					margin-right: 10rpx;
				}

				.input_part {
					margin-right: 10rpx;
					width: 100%;
					flex: 1;
				}

				.add {
					width: 100rpx;
					padding: 0 10rpx;
					height: 70rpx;
					line-height: 70rpx;
					font-size: 30rpx;
					border: 2rpx solid #dcdfe6;
					border-radius: 10rpx;
					color: #4abdb4;
					text-align: center;
				}
			}

			.hasChoosed {
				border: 2rpx solid #f6f6f6;
				padding: 20rpx;
				margin: 20rpx 0;
				border-radius: 20rpx;

				width: 100%;

				.has {
					display: inline-flex;
					justify-content: space-between;
					align-items: center;
					text-align: center;
					background: #F8F8F8;
					width: 25%;
					padding: 10rpx;
					border-radius: 10rpx;
					margin: 10rpx;

					.name {

						font-size: 28rpx;
					}

					.icon {
						margin-left: 10rpx;
					}
				}
			}

			.range {
				margin: 20rpx 0;

				.title {
					font-size: 32rpx;
					color: #333333;
					text-align: center;
					width: 100%;
					height: 80rpx;
					line-height: 80rpx;
				}

				.part {
					display: flex;
					justify-content: space-between;

					.left {
						border: 2rpx solid #f6f6f6;
						width: 50%;

						.top {
							display: flex;
							justify-content: space-between;
							align-items: center;
							font-size: 30rpx;
							color: #333333;
							padding: 10rpx 20rpx;
						}

						.list {
							padding: 10rpx 20rpx;

							/deep/.u-checkbox {
								border-bottom: 2rpx solid #f6f6f6;
							}

							.job {
								color: #007AFF;
								margin-right: 10rpx;

							}

							text {
								font-size: 28rpx;
								color: #606266;

							}
						}
					}

					.right {
						width: 40%;
						border: 2rpx solid #f6f6f6;

						.top {
							font-size: 30rpx;
							color: #4abdb4;
							padding: 10rpx 20rpx;
						}

						.list {
							padding: 10rpx 20rpx;

							.has {
								display: flex;
								background: #f6f6f6;
								padding: 10rpx;
								justify-content: space-between;
								align-items: center;
								border-radius: 10rpx;
								margin-top: 10rpx;

								.name {
									font-size: 28rpx;
								}

								.icon {
									margin: 0 10rpx;
								}
							}
						}
					}
				}
			}

			.roleAction {
				position: fixed;
				bottom: 0;
				height: 100rpx;
				line-height: 100rpx;
				display: flex;
				justify-content: space-around;
				font-size: 32rpx;
				width: 100%;
				background: #FFFFFF;

				.cancel {
					width: 40%;
					border: 2rpx solid #dedede;
					color: #606266;
					text-align: center;
					height: 80rpx;
					line-height: 80rpx;
					border-radius: 80rpx;
				}

				.sure {
					width: 40%;
					color: #FFFFFF;
					background: #4abdb4;
					text-align: center;
					height: 80rpx;
					line-height: 80rpx;
					border: 2rpx solid #4abdb4;
					border-radius: 80rpx;
				}
			}
		}


	}
</style>
